# Make sure to increase resource requests and limits before using this example in production.
# For examples with more realistic resource configuration, see
# ray-cluster.complete.large.yaml and
# ray-cluster.autoscaler.large.yaml.
apiVersion: ray.io/v1
kind: RayService
metadata:
  name: rayservice-autoscaler-multimodel
spec:
  # The workload consists of two applications. The first application checks on an event in the second application.
  # If the event isn't set, the first application will block on requests until the event is set. So, to test upscaling
  # we can first send a bunch of requests to the first application, which will trigger Serve autoscaling to bring up
  # more replicas since the existing replicas are blocked on requests. Worker pods should scale up. To test downscaling,
  # set the event in the second application, releasing all blocked requests, and worker pods should scale down.
  serveConfigV2: |
    applications:
      - name: text_classification
        import_path: text_classification.sentiments:app
        route_prefix: /textclassify
        runtime_env:
          working_dir: "https://github.com/riteshkarval/ray_serve_multimodel/archive/refs/heads/main.zip"
        deployments:
          - name: Sentiment
            autoscaling_config:
              metrics_interval_s: 0.2
              min_replicas: 1
              max_replicas: 14
              look_back_period_s: 2
              downscale_delay_s: 2
              upscale_delay_s: 1
              target_num_ongoing_requests_per_replica: 1
            graceful_shutdown_timeout_s: 5
            max_concurrent_queries: 100
            ray_actor_options:
              num_cpus: 0.5
      - name: image_classification
        import_path: image_classification.image_classifier:app
        route_prefix: /imageclassify
        runtime_env:
          working_dir: "https://github.com/riteshkarval/ray_serve_multimodel/archive/refs/heads/main.zip"
        deployments:
          - name: ImageClassifier
            autoscaling_config:
              metrics_interval_s: 0.2
              min_replicas: 1
              max_replicas: 14
              look_back_period_s: 2
              downscale_delay_s: 2
              upscale_delay_s: 1
              target_num_ongoing_requests_per_replica: 1
            graceful_shutdown_timeout_s: 5
            max_concurrent_queries: 100
            ray_actor_options:
              num_cpus: 0.5
      - name: translate
        import_path: translate.translate:app
        route_prefix: /translate
        runtime_env:
          working_dir: "https://github.com/riteshkarval/ray_serve_multimodel/archive/refs/heads/main.zip"
        deployments:
          - name: Translator
            autoscaling_config:
              metrics_interval_s: 0.2
              min_replicas: 1
              max_replicas: 14
              look_back_period_s: 2
              downscale_delay_s: 2
              upscale_delay_s: 1
              target_num_ongoing_requests_per_replica: 1
            graceful_shutdown_timeout_s: 5
            max_concurrent_queries: 100
            ray_actor_options:
              num_cpus: 0.5
  rayClusterConfig:
    rayVersion: '2.9.0' # should match the Ray version in the image of the containers
    ## raycluster autoscaling config
    enableInTreeAutoscaling: true
    autoscalerOptions:
      upscalingMode: Default
      resources:
        limits:
          cpu: "1"
          memory: "2Gi"
        requests:
          cpu: "1"
          memory: "2Gi"
    ######################headGroupSpecs#################################
    headGroupSpec:
      # The `rayStartParams` are used to configure the `ray start` command.
      # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
      # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
      rayStartParams:
        dashboard-host: '0.0.0.0'
      #pod template
      template:
        spec:
          containers:
            - name: ray-head
              image: rayproject/ray-ml:2.9.0
              resources:
                limits:
                  cpu: 2
                  memory: 8Gi
                requests:
                  cpu: 2
                  memory: 8Gi
              ports:
                - containerPort: 6379
                  name: gcs-server
                - containerPort: 8265 # Ray dashboard
                  name: dashboard
                - containerPort: 10001
                  name: client
                - containerPort: 8000
                  name: serve
    workerGroupSpecs:
      # the pod replicas in this group typed worker
      - replicas: 0
        minReplicas: 0
        maxReplicas: 5
        # logical group name, for this called small-group, also can be functional
        groupName: small-group
        rayStartParams: {}
        #pod template
        template:
          spec:
            containers:
              - name: ray-worker # must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc'
                image: rayproject/ray-ml:2.9.0
                lifecycle:
                  preStop:
                    exec:
                      command: ["/bin/sh","-c","ray stop"]
                resources:
                  limits:
                    cpu: "1"
                    memory: "2Gi"
                  requests:
                    cpu: "1"
                    memory: "2Gi"
